{"createdAt":"2025-09-26T13:24:55.130Z","updatedAt":"2025-09-29T13:42:58.000Z","id":"QhzrP0CGvH9D0PsP","name":"seo workflow","active":false,"isArchived":false,"nodes":[{"parameters":{"rule":{"interval":[{}]}},"type":"n8n-nodes-base.scheduleTrigger","typeVersion":1.2,"position":[0,0],"id":"9b58f4fc-559c-4ac1-be12-71a957ef424b","name":"Schedule Trigger"},{"parameters":{"url":"https://fakestoreapi.com/products","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[160,0],"id":"f4809b42-0ff6-4a0c-89ec-df2eaff1e223","name":"HTTP Request"},{"parameters":{"jsCode":"/**\n * Product Data Normalizer\n * Normalizes complex, nested product data to ensure clean and consistent format\n */\n\nclass ProductNormalizer {\n  /**\n   * Normalizes a single product object\n   * @param {Object} product - Raw product data\n   * @returns {Object} Normalized product data\n   */\n  static normalizeProduct(product) {\n    if (!product || typeof product !== 'object') {\n      throw new Error('Invalid product data provided');\n    }\n\n    return {\n      // Basic product information\n      id: this.normalizeId(product.id),\n      title: this.normalizeString(product.title),\n      description: this.normalizeString(product.description),\n      \n      // Price information\n      price: this.normalizePrice(product.price),\n      \n      // Category normalization\n      category: this.normalizeCategory(product.category),\n      \n      // Image URL normalization\n      image: this.normalizeImageUrl(product.image),\n      \n      // Rating information\n      rating: this.normalizeRating(product.rating),\n      \n      // Additional metadata\n      slug: this.generateSlug(product.title),\n      createdAt: new Date().toISOString(),\n      isActive: true\n    };\n  }\n\n  /**\n   * Normalizes an array of products\n   * @param {Array} products - Array of raw product data\n   * @returns {Array} Array of normalized products\n   */\n  static normalizeProducts(products) {\n    if (!Array.isArray(products)) {\n      throw new Error('Products must be an array');\n    }\n\n    return products\n      .filter(product => product && typeof product === 'object')\n      .map(product => {\n        try {\n          return this.normalizeProduct(product);\n        } catch (error) {\n          console.warn(`Failed to normalize product with ID ${product.id}:`, error.message);\n          return null;\n        }\n      })\n      .filter(product => product !== null);\n  }\n\n  /**\n   * Normalizes product ID\n   * @param {*} id - Product ID\n   * @returns {number} Normalized ID\n   */\n  static normalizeId(id) {\n    const numId = Number(id);\n    if (isNaN(numId) || numId <= 0) {\n      throw new Error('Invalid product ID');\n    }\n    return numId;\n  }\n\n  /**\n   * Normalizes string fields (title, description)\n   * @param {*} str - String to normalize\n   * @returns {string} Normalized string\n   */\n  static normalizeString(str) {\n    if (typeof str !== 'string') {\n      return '';\n    }\n    \n    return str\n      .trim()\n      .replace(/\\s+/g, ' ')  // Replace multiple spaces with single space\n      .replace(/[^\\w\\s\\-.,!?()]/g, '')  // Remove special characters except basic punctuation\n      .substring(0, 500);  // Limit length\n  }\n\n  /**\n   * Normalizes price values\n   * @param {*} price - Price value\n   * @returns {Object} Normalized price object\n   */\n  static normalizePrice(price) {\n    const numPrice = Number(price);\n    \n    if (isNaN(numPrice) || numPrice < 0) {\n      return {\n        amount: 0,\n        currency: 'USD',\n        formatted: '$0.00'\n      };\n    }\n\n    const roundedPrice = Math.round(numPrice * 100) / 100; // Round to 2 decimal places\n    \n    return {\n      amount: roundedPrice,\n      currency: 'USD',\n      formatted: `$${roundedPrice.toFixed(2)}`\n    };\n  }\n\n  /**\n   * Normalizes category information\n   * @param {*} category - Category string\n   * @returns {Object} Normalized category object\n   */\n  static normalizeCategory(category) {\n    if (typeof category !== 'string') {\n      return {\n        name: 'uncategorized',\n        slug: 'uncategorized',\n        displayName: 'Uncategorized'\n      };\n    }\n\n    const normalizedName = category.toLowerCase().trim();\n    const slug = normalizedName.replace(/[^a-z0-9]+/g, '-').replace(/^-+|-+$/g, '');\n    const displayName = category\n      .split(' ')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n      .join(' ');\n\n    return {\n      name: normalizedName,\n      slug: slug,\n      displayName: displayName\n    };\n  }\n\n  /**\n   * Normalizes image URL\n   * @param {*} imageUrl - Image URL\n   * @returns {Object} Normalized image object\n   */\n  static normalizeImageUrl(imageUrl) {\n    if (typeof imageUrl !== 'string' || !imageUrl.trim()) {\n      return {\n        url: null,\n        alt: 'Product image',\n        isValid: false\n      };\n    }\n\n    const cleanUrl = imageUrl.trim();\n    const isValid = /^https?:\\/\\/.+\\.(jpg|jpeg|png|gif|webp)(\\?.*)?$/i.test(cleanUrl);\n\n    return {\n      url: cleanUrl,\n      alt: 'Product image',\n      isValid: isValid\n    };\n  }\n\n  /**\n   * Normalizes rating information\n   * @param {*} rating - Rating object or value\n   * @returns {Object} Normalized rating object\n   */\n  static normalizeRating(rating) {\n    const defaultRating = {\n      rate: 0,\n      count: 0,\n      percentage: 0,\n      stars: '☆☆☆☆☆'\n    };\n\n    if (!rating || typeof rating !== 'object') {\n      return defaultRating;\n    }\n\n    const rate = Number(rating.rate) || 0;\n    const count = Number(rating.count) || 0;\n    \n    // Clamp rate between 0 and 5\n    const normalizedRate = Math.max(0, Math.min(5, rate));\n    const roundedRate = Math.round(normalizedRate * 10) / 10;\n    \n    // Generate star representation\n    const fullStars = Math.floor(roundedRate);\n    const hasHalfStar = (roundedRate - fullStars) >= 0.5;\n    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);\n    \n    const stars = '★'.repeat(fullStars) + \n                 (hasHalfStar ? '½' : '') + \n                 '☆'.repeat(emptyStars);\n\n    return {\n      rate: roundedRate,\n      count: Math.max(0, count),\n      percentage: (roundedRate / 5) * 100,\n      stars: stars\n    };\n  }\n\n  /**\n   * Generates URL-friendly slug from title\n   * @param {string} title - Product title\n   * @returns {string} URL slug\n   */\n  static generateSlug(title) {\n    if (typeof title !== 'string') {\n      return 'product';\n    }\n\n    return title\n      .toLowerCase()\n      .trim()\n      .replace(/[^\\w\\s-]/g, '')  // Remove special characters\n      .replace(/\\s+/g, '-')      // Replace spaces with hyphens\n      .replace(/-+/g, '-')       // Replace multiple hyphens with single hyphen\n      .replace(/^-+|-+$/g, '')   // Remove leading/trailing hyphens\n      .substring(0, 50);         // Limit length\n  }\n\n  /**\n   * Validates normalized product data\n   * @param {Object} product - Normalized product\n   * @returns {Object} Validation result\n   */\n  static validateProduct(product) {\n    const errors = [];\n    const warnings = [];\n\n    // Required field validations\n    if (!product.id || product.id <= 0) {\n      errors.push('Invalid or missing product ID');\n    }\n\n    if (!product.title || product.title.trim().length === 0) {\n      errors.push('Product title is required');\n    }\n\n    if (product.price.amount <= 0) {\n      warnings.push('Product price is zero or negative');\n    }\n\n    if (!product.image.isValid) {\n      warnings.push('Product image URL may be invalid');\n    }\n\n    if (product.rating.count === 0) {\n      warnings.push('Product has no ratings');\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors: errors,\n      warnings: warnings\n    };\n  }\n}\n\n// Main execution for workflow automation tools\n// This code processes the input items and returns normalized products\n\ntry {\n  // Try multiple ways to get input data\n  let inputItems = [];\n  \n  // Method 1: Try $input.all()\n  try {\n    inputItems = $input.all();\n    console.log('Using $input.all(), found items:', inputItems.length);\n  } catch (e) {\n    console.log('$input.all() not available');\n  }\n  \n  // Method 2: Try getting from HTTP Request node\n  if (inputItems.length === 0) {\n    try {\n      const httpData = $('HTTP Request').all();\n      inputItems = httpData;\n      console.log('Using HTTP Request data, found items:', inputItems.length);\n    } catch (e) {\n      console.log('HTTP Request data not available');\n    }\n  }\n  \n  // Method 3: Try getting from items variable\n  if (inputItems.length === 0) {\n    try {\n      if (typeof items !== 'undefined') {\n        inputItems = items;\n        console.log('Using items variable, found items:', inputItems.length);\n      }\n    } catch (e) {\n      console.log('items variable not available');\n    }\n  }\n  \n  // Method 4: Try getting JSON data directly\n  if (inputItems.length === 0) {\n    try {\n      if (typeof $json !== 'undefined') {\n        inputItems = Array.isArray($json) ? $json : [$json];\n        console.log('Using $json data, found items:', inputItems.length);\n      }\n    } catch (e) {\n      console.log('$json not available');\n    }\n  }\n  \n  console.log('Total input items found:', inputItems.length);\n  console.log('First item structure:', inputItems[0]);\n  \n  // Extract JSON data if items are wrapped\n  const rawData = inputItems.map(item => {\n    if (item && item.json) {\n      return item.json;\n    }\n    return item;\n  });\n  \n  console.log('Raw data to normalize:', rawData.length, 'items');\n  \n  // Normalize the products\n  const normalizedProducts = ProductNormalizer.normalizeProducts(rawData);\n  \n  console.log('Normalized products:', normalizedProducts.length, 'items');\n  \n  // Return the normalized products as an array for the workflow\n  const output = normalizedProducts.map(product => ({\n    json: product\n  }));\n  \n  console.log('Final output items:', output.length);\n  return output;\n  \n} catch (error) {\n  console.error('Normalization failed:', error.message);\n  console.error('Error stack:', error.stack);\n  \n  // Return error information\n  return [{\n    json: {\n      error: true,\n      message: error.message,\n      stack: error.stack,\n      timestamp: new Date().toISOString(),\n      debug: {\n        inputAvailable: typeof $input !== 'undefined',\n        jsonAvailable: typeof $json !== 'undefined',\n        itemsAvailable: typeof items !== 'undefined'\n      }\n    }\n  }];\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[784,48],"id":"3a8e9a24-58d9-4591-a64c-31cd1fe12ad3","name":"Code in JavaScript"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"3a0975d2-5386-4826-9e69-25e93b5d9e24","leftValue":"={{ $json.output }}","rightValue":100,"operator":{"type":"string","operation":"notEmpty","singleValue":true}},{"id":"e07d470f-d2b0-4df7-b43d-2374ae80c168","leftValue":"={{ $json.output.length }}","rightValue":80,"operator":{"type":"number","operation":"gt"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[896,-112],"id":"5a74f038-c12c-4605-9bbe-da48d83edeb2","name":"If"},{"parameters":{"promptType":"define","text":"=You are an expert SEO copywriter specializing in creating compelling meta descriptions for e-commerce products. Your task is to generate concise, SEO-friendly meta descriptions that:\n\n1. Stay within 150-160 characters (including spaces)\n2. Include relevant keywords naturally\n3. Create urgency or appeal that encourages clicks\n4. Accurately describe the product's key benefits\n5. Match search intent for potential buyers\n6. Use action-oriented language when appropriate\n7. Avoid keyword stuffing or overly promotional language\n\nFocus on what makes each product unique and valuable to potential customers. The meta description should work as a compelling preview that appears in search engine results.\nTHIS IS THE DESCRIPTION :{{ $json.description }}","options":{"systemMessage":"Generate an SEO-friendly meta description for the following product:\n\n**Product Name:** [PRODUCT_NAME]\n**Category:** [CATEGORY]\n**Key Features:** [LIST_KEY_FEATURES]\n**Target Audience:** [TARGET_DEMOGRAPHIC]\n**Price Range:** [PRICE_RANGE] (optional)\n**Brand:** [BRAND_NAME]\n**Unique Selling Points:** [MAIN_BENEFITS]\n\nAdditional Context: [ANY_SPECIAL_PROMOTIONS_OR_SEASONAL_RELEVANCE]\n\nPlease provide only the meta description text, optimized for search engines and user engagement."}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2.2,"position":[992,96],"id":"99aacd42-76f3-4901-a0d2-1868854e308a","name":"AI Agent1","alwaysOutputData":false},{"parameters":{"modelName":"models/gemini-2.0-flash-thinking-exp-1219","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatGoogleGemini","typeVersion":1,"position":[752,160],"id":"0204f760-e381-4c72-8759-2aa8ffe10e60","name":"Google Gemini Chat Model1","credentials":{"googlePalmApi":{"id":"8IokudigvXDO7LZM","name":"Google Gemini(PaLM) Api account 2"}}},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[528,0],"id":"f0b87852-bfea-4383-a2a8-76cffedcef9b","name":"Loop Over Items"},{"parameters":{"sendTo":"cameotrans7@gmail.com","subject":"= ✅ Daily Product Processing Report","message":"=Subject: ✅ Daily Product Processing Report  Body (HTML):  <html>   <body style=\"font-family: Arial, sans-serif; line-height: 1.6; color: #333;\">     <h2>✅ Daily Product Processing Report</h2>     <p>Hello Team,</p>     <p>Here is the summary of today’s product processing run:</p>     <ul>       <li><b>Total products received:</b> {{ $('HTTP Request').all().length }}</li>       <li><b>Successfully processed:</b> {{ $json.count_ID }}</li>       <li><b>Failed/Errors:</b> 0</li>     </ul>     <p>Please review the error logs for the failed items and take necessary action.</p>     <p>Best regards,<br/>Automation Bot</p>\n{{ $json.ID }}\n</body> </html>","options":{}},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[2016,-192],"id":"a48c4a80-882b-4ff4-923a-b186666e0e56","name":"Send a message","webhookId":"cdce9bc6-72cf-4830-beb5-c9183c74bdda","credentials":{"gmailOAuth2":{"id":"eNDaG4fJintyBfkN","name":"new"}}},{"parameters":{"operation":"appendOrUpdate","documentId":{"__rl":true,"value":"1mL3PocCZM5-AMJenm6sshtb9UuakgAcVcRD_4yrdtzQ","mode":"list","cachedResultName":"email that have to audit","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1mL3PocCZM5-AMJenm6sshtb9UuakgAcVcRD_4yrdtzQ/edit?usp=drivesdk"},"sheetName":{"__rl":true,"value":"gid=0","mode":"list","cachedResultName":"Sheet1","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1mL3PocCZM5-AMJenm6sshtb9UuakgAcVcRD_4yrdtzQ/edit#gid=0"},"columns":{"mappingMode":"defineBelow","value":{"id ":"={{ $json.id }}","description":"="},"matchingColumns":["id "],"schema":[{"id":"id ","displayName":"id ","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"description","displayName":"description","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.googleSheets","typeVersion":4.7,"position":[1680,128],"id":"3d7e8319-447a-40b4-990e-039e62afb908","name":"Append or update row in sheet1","credentials":{"googleSheetsOAuth2Api":{"id":"VhTcpKoOaflq76So","name":"Google Sheets account 2"}}},{"parameters":{"operation":"appendOrUpdate","documentId":{"__rl":true,"value":"162SD-7et2h8Q4CgZs3b5Xe4JbnlaJ4K-ACC6LcV1Mkw","mode":"list","cachedResultName":"product catalog","cachedResultUrl":"https://docs.google.com/spreadsheets/d/162SD-7et2h8Q4CgZs3b5Xe4JbnlaJ4K-ACC6LcV1Mkw/edit?usp=drivesdk"},"sheetName":{"__rl":true,"value":"gid=0","mode":"list","cachedResultName":"Sheet1","cachedResultUrl":"https://docs.google.com/spreadsheets/d/162SD-7et2h8Q4CgZs3b5Xe4JbnlaJ4K-ACC6LcV1Mkw/edit#gid=0"},"columns":{"mappingMode":"autoMapInputData","value":{},"matchingColumns":["ID"],"schema":[{"id":"ID","displayName":"ID","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"product name","displayName":"product name","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"price","displayName":"price","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"description ","displayName":"description ","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"imageUrl ","displayName":"imageUrl ","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"META DESCRIPTION ","displayName":"META DESCRIPTION ","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.googleSheets","typeVersion":4.7,"position":[1344,-352],"id":"0a35f0b9-3166-4df8-b71f-55c311f54720","name":"Append or update row in sheet","credentials":{"googleSheetsOAuth2Api":{"id":"VhTcpKoOaflq76So","name":"Google Sheets account 2"}}},{"parameters":{"assignments":{"assignments":[{"id":"e04d89ba-8e91-4a35-a553-fb8ac2a41343","name":"ID","value":"={{ $('HTTP Request').item.json.id }}","type":"string"},{"id":"f753697b-4b88-4a5e-8dad-b3efdb2d75d2","name":"product name","value":"={{ $('HTTP Request').item.json.title }}","type":"string"},{"id":"0a3d55da-2003-420f-a78a-3955e284f2a7","name":"price","value":"={{ $('HTTP Request').item.json.price }}","type":"string"},{"id":"723e2f03-41d8-4752-a337-81bd7ab29e21","name":"description ","value":"={{ $('HTTP Request').item.json.description }}","type":"string"},{"id":"f2c9783c-b01d-4c8d-ba3c-715039ca4dbd","name":"imageUrl ","value":"={{ $('HTTP Request').item.json.image }}","type":"string"},{"id":"23a9bad4-f3af-4b36-8ef0-3acf343d3c65","name":"META DESCRIPTION ","value":"={{ $json.output }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1104,-208],"id":"3c217492-2710-4b51-a7d5-64520b29c0b0","name":"Edit Fields"},{"parameters":{"fieldsToSummarize":{"values":[{"field":"ID"}]},"options":{}},"type":"n8n-nodes-base.summarize","typeVersion":1.1,"position":[1552,-352],"id":"d6ecb643-adad-4e46-9531-7187b6ae3b1a","name":"Summarize"}],"connections":{"Schedule Trigger":{"main":[[{"node":"HTTP Request","type":"main","index":0}]]},"HTTP Request":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Code in JavaScript":{"main":[[{"node":"AI Agent1","type":"main","index":0}]]},"AI Agent1":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Google Gemini Chat Model1":{"ai_languageModel":[[{"node":"AI Agent1","type":"ai_languageModel","index":0}]]},"If":{"main":[[{"node":"Edit Fields","type":"main","index":0}],[{"node":"Append or update row in sheet1","type":"main","index":0}]]},"Loop Over Items":{"main":[[{"node":"If","type":"main","index":0}],[{"node":"Code in JavaScript","type":"main","index":0}]]},"Append or update row in sheet":{"main":[[{"node":"Summarize","type":"main","index":0}]]},"Edit Fields":{"main":[[{"node":"Append or update row in sheet","type":"main","index":0}]]},"Summarize":{"main":[[{"node":"Send a message","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"b46d08d5-2f45-4dba-92ed-30c36586cd7d","triggerCount":0,"shared":[{"createdAt":"2025-09-26T13:24:55.160Z","updatedAt":"2025-09-26T13:24:55.160Z","role":"workflow:owner","workflowId":"QhzrP0CGvH9D0PsP","projectId":"Y7ENNAbt7AnhyYc8"}],"tags":[]}